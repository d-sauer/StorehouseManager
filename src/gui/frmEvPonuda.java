/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmEvPonuda.java
 *
 * Created on 13.03.2009., 19:50:13
 */
package gui;

import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import persistence.Stavkaponuda;

/**
 *
 * @author sheky
 */
public class frmEvPonuda extends javax.swing.JPanel {

    public static JPanel newPanel = null;
    public String reportFile = "report/Ponuda.jasper";//"../report/Ponuda.jasper"; //jrxml";
    private Integer idOtpremnice = null;
    private int tblSelRow = -1;

    /** Creates new form frmEvPonuda */
    public frmEvPonuda() {
        initComponents();
        panelHeader.setVisible(false);
        panelFooter.setVisible(false);

        restrict();

        tblPonude.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    public void valueChanged(ListSelectionEvent e) {

                        if (tblSelRow != tblPonude.getSelectedRow()) {
                            tblSelRow = tblPonude.getSelectedRow();                            
                            getStavkePonude();

                        }
                    }
                });
    }

      private void restrict() {

        Integer pri = MainWindow.getPristup();
        if (pri == null) { //pocetno stanje
            btnFaktura.setEnabled(false);
        } else {
            System.out.println("RESTRICT: " + pri.toString());
            btnFaktura.setEnabled(true);
            if (pri == 0) { //administrator
                btnFaktura.setVisible(true);
            } else if (pri == 1) { //vlasnik
                btnFaktura.setVisible(true);
            } else if (pri == 2) { //zaposlenik
                btnFaktura.setVisible(false);
            }
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        prikazBtnGrp = new javax.swing.ButtonGroup();
        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("purgarPU").createEntityManager();
        queryPonuda = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Ponuda p");
        listQuery = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryPonuda.getResultList());
        listStavke = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(queryPonuda.getResultList());
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPonude = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStavke = new javax.swing.JTable();
        panelHeader = new javax.swing.JScrollPane();
        txtOpisHeader = new javax.swing.JTextArea();
        panelFooter = new javax.swing.JScrollPane();
        txtOpisFooter = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        tbSve = new javax.swing.JToggleButton();
        tbTijeku = new javax.swing.JToggleButton();
        tbNeprihvacene = new javax.swing.JToggleButton();
        tbFakturirane = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        btnNovaPonuda = new javax.swing.JButton();
        btnPromPonude = new javax.swing.JButton();
        btnPonudaStatus = new javax.swing.JToggleButton();
        btnDelPonuda = new javax.swing.JButton();
        btnFaktura = new javax.swing.JButton();
        btnIspis = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(600, 500));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ponude"));

        tblPonude.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listQuery, tblPonude);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idPonuda}"));
        columnBinding.setColumnName("Id Ponuda");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${datumKreiranja}"));
        columnBinding.setColumnName("Datum Kreiranja");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${mjestoKreiranja}"));
        columnBinding.setColumnName("Mjesto Kreiranja");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        tblPonude.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                tblPonudeHierarchyChanged(evt);
            }
        });
        tblPonude.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblPonudePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tblPonude);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Stavke ponude"));

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listStavke, tblStavke);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${opis}"));
        columnBinding.setColumnName("Opis");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dimenzije}"));
        columnBinding.setColumnName("Dimenzije");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kolicina}"));
        columnBinding.setColumnName("Kolicina");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${jedCijena}"));
        columnBinding.setColumnName("Jed Cijena");
        columnBinding.setColumnClass(Float.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(tblStavke);

        panelHeader.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        txtOpisHeader.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        txtOpisHeader.setColumns(20);
        txtOpisHeader.setEditable(false);
        txtOpisHeader.setFont(new java.awt.Font("Monospaced", 0, 12));
        txtOpisHeader.setRows(2);
        panelHeader.setViewportView(txtOpisHeader);

        panelFooter.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        txtOpisFooter.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        txtOpisFooter.setColumns(20);
        txtOpisFooter.setEditable(false);
        txtOpisFooter.setFont(new java.awt.Font("Monospaced", 0, 12));
        txtOpisFooter.setRows(2);
        panelFooter.setViewportView(txtOpisFooter);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
            .addComponent(panelFooter, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(panelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Način prikaza"));
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        prikazBtnGrp.add(tbSve);
        tbSve.setSelected(true);
        tbSve.setText("Prikaži sve ponude");
        tbSve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbSveActionPerformed(evt);
            }
        });
        jPanel3.add(tbSve);

        prikazBtnGrp.add(tbTijeku);
        tbTijeku.setText("Ponude u tijeku");
        tbTijeku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbTijekuActionPerformed(evt);
            }
        });
        jPanel3.add(tbTijeku);

        prikazBtnGrp.add(tbNeprihvacene);
        tbNeprihvacene.setText("Neprihvačene ponude");
        tbNeprihvacene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbNeprihvaceneActionPerformed(evt);
            }
        });
        jPanel3.add(tbNeprihvacene);

        prikazBtnGrp.add(tbFakturirane);
        tbFakturirane.setText("Fakturirane ponude");
        tbFakturirane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbFakturiraneActionPerformed(evt);
            }
        });
        jPanel3.add(tbFakturirane);

        jPanel4.setAutoscrolls(true);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        btnNovaPonuda.setText("Nova ponuda");
        btnNovaPonuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaPonudaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel4.add(btnNovaPonuda, gridBagConstraints);

        btnPromPonude.setText("Promjena ponude");
        btnPromPonude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromPonudeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel4.add(btnPromPonude, gridBagConstraints);

        btnPonudaStatus.setText("Neprihvačena ponuda");
        btnPonudaStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPonudaStatusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel4.add(btnPonudaStatus, gridBagConstraints);

        btnDelPonuda.setText("Obriši ponudu");
        btnDelPonuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelPonudaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel4.add(btnDelPonuda, gridBagConstraints);

        btnFaktura.setText("Nova faktura");
        btnFaktura.setToolTipText("Nova faktura na temelju ponude");
        btnFaktura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFakturaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel4.add(btnFaktura, gridBagConstraints);

        btnIspis.setText("Pregled ponude");
        btnIspis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIspisActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel4.add(btnIspis, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, 0, 153, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovaPonudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaPonudaActionPerformed
        newPonuda();
}//GEN-LAST:event_btnNovaPonudaActionPerformed

    private void btnPromPonudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromPonudeActionPerformed
        editPonuda();
    }//GEN-LAST:event_btnPromPonudeActionPerformed

    private void btnIspisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIspisActionPerformed
        if (tblPonude.getSelectedRow() != -1) {
            int selRow = tblPonude.getSelectedRow();
            Integer idPon = listQuery.get(selRow).getIdPonuda();
            frmPdfRead newReport = new frmPdfRead(reportFile);
            HashMap param = new HashMap();
            param.put("idPonude", idPon.toString());
            newReport.setParametri(param);
            newReport.setParentJPanel(this);
            MainWindow.openJPanel(newReport, false);
            System.out.println(entityManager.getDelegate().toString());
        }
    }//GEN-LAST:event_btnIspisActionPerformed

    private void tblPonudeHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_tblPonudeHierarchyChanged
    }//GEN-LAST:event_tblPonudeHierarchyChanged

    private void tblPonudePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblPonudePropertyChange
        getStavkePonude();
    }//GEN-LAST:event_tblPonudePropertyChange

    private void btnPonudaStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPonudaStatusActionPerformed
        if (btnPonudaStatus.isSelected() == true) {
            setPonudaStatus(0); //neprihvacena

            String[] btn = {"Uredu"};
            JOptionPane.showOptionDialog(null, "Ponuda je označena kao neprihvaćena.", "Ponuda", 0, JOptionPane.INFORMATION_MESSAGE, null, btn, 0);
        } else {
            setPonudaStatus(1); //prihvacena

            String[] btn = {"Uredu"};
            JOptionPane.showOptionDialog(null, "Ponuda je označena kao prihvaćena.", "Ponuda", 0, JOptionPane.INFORMATION_MESSAGE, null, btn, 0);
        }

    }//GEN-LAST:event_btnPonudaStatusActionPerformed

    private void btnDelPonudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelPonudaActionPerformed
        String[] button = {"Da", "Ne"};
        String poruka = "Dali sigurno želite obrisati ponudu?";
        String naslov = "Ponuda";
        int resp = JOptionPane.showOptionDialog(null, poruka, naslov, 0, JOptionPane.QUESTION_MESSAGE, null, button, 0);
        if (resp == 0) {
            delPonuda();
        }
    }//GEN-LAST:event_btnDelPonudaActionPerformed

    private void btnFakturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFakturaActionPerformed
        frmNovaFaktura newFaktura = new frmNovaFaktura(-1, true);
        newFaktura.setStavkePonude(getSelIdPonuda());
        MainWindow.openJPanel(newFaktura, false);
    }//GEN-LAST:event_btnFakturaActionPerformed

    private void tbSveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbSveActionPerformed
        prikaz();
    }//GEN-LAST:event_tbSveActionPerformed

    private void tbTijekuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbTijekuActionPerformed
        prikaz();
    }//GEN-LAST:event_tbTijekuActionPerformed

    private void tbNeprihvaceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbNeprihvaceneActionPerformed
        prikaz();
    }//GEN-LAST:event_tbNeprihvaceneActionPerformed

    private void tbFakturiraneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbFakturiraneActionPerformed
        prikaz();
    }//GEN-LAST:event_tbFakturiraneActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        System.out.println("frmEvPonuda shown...");
        MainWindow.openJPanel(this, false);
        refreshPonuda();
    }//GEN-LAST:event_formFocusGained

    private void delPonuda() {
        int idPon = getSelIdPonuda();
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        } else {
            entityManager.getTransaction().rollback();
            entityManager.getTransaction().begin();
        }
        //del stavke ponude ponude        
        EntityManager em = entityManager;
        String strQuery = "DELETE FROM Stavkaponuda sp WHERE sp.idPonuda = :idPonuda";
        Query q = em.createQuery(strQuery);
        q.setParameter("idPonuda", idPon);
        q.executeUpdate();
        entityManager.getTransaction().commit();
        //del ponuda
        entityManager.getTransaction().begin();
        persistence.Ponuda pon = entityManager.find(persistence.Ponuda.class, idPon);
        entityManager.remove(pon);
        listQuery.remove(pon);
        entityManager.getTransaction().commit();

    //del otpremnica
        /*if (idOtpremnice != null) {
    deleteOtpremnica(idOtpremnice);
    }*/
    }

    public Integer getSelIdPonuda() {
        int selRow = tblPonude.getSelectedRow();
        if (selRow != -1) {
            int idPon = listQuery.get(selRow).getIdPonuda();
            return idPon;
        } else {
            return null;
        }
    }

    public void editPonuda() {
        int selRow = tblPonude.getSelectedRow();
        int idPon = listQuery.get(selRow).getIdPonuda();

        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        } else {
            entityManager.getTransaction().rollback();
            entityManager.getTransaction().begin();
        }
        persistence.Ponuda newPon = entityManager.find(persistence.Ponuda.class, idPon);
        entityManager.refresh(newPon);
        entityManager.getTransaction().commit();
        //open window
        frmPonuda frmPo = new frmPonuda();
        //newPanel = frmPo;
        MainWindow.openJPanel(frmPo, false);
        frmPo.setTrenutnaPonuda(newPon, false);
    }

    public void newPonuda() {
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        } else {
            entityManager.getTransaction().rollback();
            entityManager.getTransaction().begin();
        }
        persistence.Ponuda newPon = new persistence.Ponuda();

        newPon.setMjestoKreiranja("Novi Marof");
        //format datuma
        Date dK = new Date();
        newPon.setDatumKreiranja(dK);
        newPon.setStat(1); //1- Nova ponuda u tijeku

        entityManager.persist(newPon);
        entityManager.getTransaction().commit();
        //entityManager.getTransaction().begin();

        //open window
        frmPonuda frmPo = new frmPonuda();
        //newPanel = frmPo;
        MainWindow.openJPanel(frmPo, false);
        frmPo.setTrenutnaPonuda(newPon, true);
    }

    public void getStavkePonude() {
        int selRow = tblPonude.getSelectedRow();
        if (selRow != -1) {
            boolean refresh = false;
            int idPon = listQuery.get(selRow).getIdPonuda();
            int idPart = listQuery.get(selRow).getIdPartner();
            Integer status = listQuery.get(selRow).getStat();
            String mjesto = listQuery.get(selRow).getMjestoKreiranja();

            if (status == null) {
                status = 1;
            }

            //postavljanje status gumba.. 0- neprihvaćena, 1 u tijeku
            if (status == 0) {
                btnPonudaStatus.setSelected(true);
            } else {
                btnPonudaStatus.setSelected(false);
            }
           

            //stavke ponude
            boolean stavkaRacuna = false;
            EntityManager em = entityManager;
            String strQuery = "SELECT sp FROM Stavkaponuda sp WHERE sp.idPonuda = :idPonuda";
            Query q = em.createQuery(strQuery);
            q.setParameter("idPonuda", idPon);
            Collection data = q.getResultList();
            persistence.Stavkaponuda stPon;

            for (Object entity : data) {
                stPon = (Stavkaponuda) entity;
                if (stPon.getIdRacuna() != null) { //provjera dali je stavka ponude ukljucena u neku od stavki racuna
                    stavkaRacuna = true;          //ako je, tada se da ponuda nemože obrisati ni mijenjati
                    System.out.println("Ponuda: " + stPon.getIdPonuda().toString() + " stavka: " + stPon.getIdStPon().toString() + " je dio stavke fakture: " + stPon.getIdRacuna().toString());
                }
                entityManager.refresh(entity);
            }
            listStavke.clear();
            listStavke.addAll(data);

            btnFaktura.setEnabled(!stavkaRacuna);
            btnPonudaStatus.setEnabled(!stavkaRacuna);
            btnDelPonuda.setEnabled(!stavkaRacuna);
            btnPromPonude.setEnabled(!stavkaRacuna);

            if ((listQuery.get(selRow).getOpisHeader() != null) && (listQuery.get(selRow).getOpisHeader().length() != 0)) {
                txtOpisHeader.setText(listQuery.get(selRow).getOpisHeader());
                panelHeader.setVisible(true);
            } else {
                panelHeader.setVisible(false);
            }

            if ((listQuery.get(selRow).getOpisFooter() != null) && (listQuery.get(selRow).getOpisFooter().length() != 0)) {
                txtOpisFooter.setText(listQuery.get(selRow).getOpisFooter());
                panelFooter.setVisible(true);
            } else {
                panelFooter.setVisible(false);
            }
            this.updateUI();
        }
    }

    public void setPonudaStatus(Integer stanje) {
        int selRow = tblPonude.getSelectedRow();
        if (selRow != -1) {
            if (!entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().begin();
            } else {
                entityManager.getTransaction().rollback();
                entityManager.getTransaction().begin();
            }

            int idPon = listQuery.get(selRow).getIdPonuda();
            /*String strQuery = "UPDATE Ponuda p SET p.stat=:stanje WHERE p.idPonuda=:idPonuda";
            EntityManager em = entityManager;
            Query q = em.createQuery(strQuery);
            q.setParameter("stanje", stanje);
            q.setParameter("idPonuda", idPon);
            q.executeUpdate();*/
            listQuery.get(selRow).setStat(stanje);
            entityManager.getTransaction().commit();
            System.out.println("stanje:" + stanje.toString());
        }
    }

    public void refreshPonuda() {
        if (!entityManager.getTransaction().isActive()) {
            entityManager.getTransaction().begin();
        } else {
            entityManager.getTransaction().rollback();
            entityManager.getTransaction().begin();
        }
        int selRow = tblPonude.getSelectedRow();

        String strQuery = "SELECT p FROM Ponuda p";
        System.out.println("Stavke query: " + strQuery);
        EntityManager em = entityManager;
        Query q = em.createQuery(strQuery);

        Collection data = q.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        listQuery.clear();
        listQuery.addAll(data);

        listStavke.clear();

        tblPonude.updateUI();
        if (selRow != -1) {
            tblPonude.setRowSelectionInterval(selRow, selRow);
        }
    }

    private void prikaz() {
        String strQuery = null;
        if (tbSve.isSelected()) {
            strQuery = "SELECT p FROM Ponuda p";
        } else if (tbTijeku.isSelected()) {
            //strQuery = "SELECT p FROM Ponuda p,Racun r WHERE (p.stat=1) AND NOT(p.idPonuda=r.idPonuda)";            
            //strQuery = "SELECT p FROM Ponuda p WHERE (p.stat=1)";
            strQuery = "SELECT p FROM Ponuda p WHERE p.idPonuda NOT IN (SELECT distinct sp.idPonuda FROM Stavkaponuda sp WHERE (sp.idRacuna <> 0) AND (sp.idPonuda<>0)) AND p.stat=1";
        } else if (tbNeprihvacene.isSelected()) {
            strQuery = "SELECT p FROM Ponuda p WHERE p.stat=0";
        } else if (tbFakturirane.isSelected()) {
            strQuery = "SELECT p FROM Ponuda p WHERE p.idPonuda IN (SELECT distinct sp.idPonuda FROM Stavkaponuda sp WHERE (sp.idRacuna <> 0) AND (sp.idPonuda<>0))";
        }
        EntityManager em = entityManager;
        Query q = em.createQuery(strQuery);
        Collection data = q.getResultList();
        listQuery.clear();
        listStavke.clear();
        listQuery.addAll(data);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelPonuda;
    private javax.swing.JButton btnFaktura;
    private javax.swing.JButton btnIspis;
    private javax.swing.JButton btnNovaPonuda;
    private javax.swing.JToggleButton btnPonudaStatus;
    private javax.swing.JButton btnPromPonude;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.util.List<persistence.Ponuda> listQuery;
    private java.util.List<persistence.Stavkaponuda> listStavke;
    private javax.swing.JScrollPane panelFooter;
    private javax.swing.JScrollPane panelHeader;
    private javax.swing.ButtonGroup prikazBtnGrp;
    private javax.persistence.Query queryPonuda;
    private javax.swing.JToggleButton tbFakturirane;
    private javax.swing.JToggleButton tbNeprihvacene;
    private javax.swing.JToggleButton tbSve;
    private javax.swing.JToggleButton tbTijeku;
    private javax.swing.JTable tblPonude;
    private javax.swing.JTable tblStavke;
    private javax.swing.JTextArea txtOpisFooter;
    private javax.swing.JTextArea txtOpisHeader;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
